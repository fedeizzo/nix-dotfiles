* QMK keyboard configs
Personal QMK configuration for [[https://github.com/foostan/crkbd][corne]] and [[https://github.com/kata0510/Lily58][lily58]] keyboards.

Structure inspired by:
- [[https://github.com/manna-harbour/miryoku_babel][Miryoky Babel]]
- [[https://github.com/Kranex/qmk-config][Kranex qmk config]]

Build:
1. run ~./flash.sh build~.
  
Usage:
1. define the keymap in tables;
2. tangle this file;
3. (optional) execute the python code cell to generate the the keymap image;
4. run ~./flash.sh flash lily~ or ~./flash.sh flash corne~.
** Lily58
*** Base
#+NAME: base-layer-left
| KC_ESC         | KC_1 | KC_2 | KC_3 | KC_4 | KC_5 |
| LGUI(KC_TAB)   | KC_Q | KC_W | KC_F | KC_P | KC_B |
| LCTL_T(KC_ESC) | KC_A | KC_R | KC_S | KC_T | KC_G |
| KC_CAPS        | KC_Z | KC_X | KC_C | KC_D | KC_V |

#+NAME:  base-layer-right
| KC_6 | KC_7 | KC_8     | KC_9   | KC_0    | KC_ESC       |
| KC_J | KC_L | KC_U     | KC_Y   | KC_QUOT | LCTL(KC_T)   |
| KC_M | KC_N | KC_E     | KC_I   | KC_O    | KC_SCLN      |
| KC_K | KC_H | KC_COMMA | KC_DOT | KC_SLSH | LCTL(KC_TAB) |

#+NAME: base-layer-left-thumb
| KC_NO | LT(_NAV, KC_ESC) | LGUI_T(KC_SPC) | SFT_T(KC_TAB) | KC_NO |

#+NAME: base-layer-right-thumb
| KC_NO | LCTL_T(KC_ENT) | LT(_NUM, KC_BSPC) | KC_LALT | KC_NO |

*** Navigation
#+NAME: navigation-layer-left
| KC_NO | KC_NO | KC_NO | KC_NO | KC_NO | KC_NO |
| KC_NO | KC_NO | KC_NO | KC_NO | KC_NO | KC_NO |
| KC_NO | KC_NO | KC_NO | KC_NO | KC_NO | KC_NO |
| KC_NO | KC_NO | KC_NO | KC_NO | KC_NO | KC_NO |

#+NAME: navigation-layer-right
| KC_NO   | KC_NO   | KC_NO   | KC_NO   | KC_NO | KC_NO |
| KC_MPRV | KC_VOLD | KC_VOLU | KC_MNXT | KC_NO | KC_NO |
| KC_LEFT | KC_DOWN | KC_UP   | KC_RGHT | KC_NO | KC_NO |
| KC_HOME | KC_END  | KC_MPLY | KC_MUTE | KC_NO | KC_NO |

#+NAME: navigation-layer-left-thumb
| KC_NO | KC_NO | KC_TRNS | KC_NO | KC_NO |

#+NAME: navigation-layer-right-thumb
| KC_NO | KC_ENT | KC_BSPC | KC_NO | KC_NO |

*** Num
#+NAME: num-layer-left
| KC_NO | KC_NO   | KC_NO | KC_NO | KC_NO | KC_NO   |
| RESET | KC_LBRC | KC_7  | KC_8  | KC_9  | KC_RBRC |
| KC_NO | KC_0    | KC_4  | KC_5  | KC_6  | KC_EQL  |
| KC_NO | KC_GRV  | KC_1  | KC_2  | KC_3  | KC_BSLS |

#+NAME: num-layer-right
| KC_NO   | KC_NO   | KC_NO   | KC_NO   | KC_NO   | KC_NO |
| KC_LCBR | KC_LPRN | KC_ASTR | KC_AMPR | KC_RCBR | KC_NO |
| KC_PLUS | KC_CIRC | KC_PERC | KC_DLR  | KC_RPRN | KC_NO |
| KC_PIPE | KC_HASH | KC_AT   | KC_EXLM | KC_TILD | KC_NO |

#+NAME: num-layer-left-thumb
| KC_NO | KC_UNDS | KC_NO | KC_MINS | KC_NO |

#+NAME: num-layer-right-thumb
| KC_NO | KC_ENT | KC_TRNS | KC_NO | KC_NO |

*** Visualization
#+name: html-table-generator
#+begin_src python :var in_layer_left="None" :var in_layer_right="None" :var in_layer_left_thumb="None" :var in_layer_right_thumb="None" :results verbatim
  mapper = {
      "QUOT": "'",
      "COMMA": ",",
      "DOT": ".",
      "SLSH": "/",
      "SCLN": ";",
  }


  def format_key(key):
      key = key.replace("KC_", "")
      key = mapper.get(key, key)
      if key.startswith("LCTL("):
          key = key.replace("LCTL(", "CTRL+")
          key = key.replace(")", "")
      if key.startswith("LGUI("):
          key = key.replace("LGUI(", "GUI+")
          key = key.replace(")", "")
      if key.startswith("LCTL_T"):
          key = key.replace("LCTL_T(", "CTRL/")
          key = key.replace(")", "")
      if key.startswith("SFT_T"):
          key = key.replace("SFT_T(", "SHIFT/")
          key = key.replace(")", "")
      if key.startswith("LGUI_T"):
          key = key.replace("LGUI_T(", "GUI/")
          key = key.replace(")", "")
      if key.startswith("LT"):
          key = key.replace("LT(", "")
          key = key.replace(")", "")
          key = key.replace(", ", "/")
      if key.startswith("NO"):
          key = key.replace("NO", "")
      return key


  table = ""
  for i, (lrow, rrow) in enumerate(zip(in_layer_left, in_layer_right)):
      table += "<tr>\n"
      if i == 3:
          row = lrow + [in_layer_left_thumb[0][-1], in_layer_left_thumb[0][0]] + rrow
      else:
          row = lrow + [" ", " "] + rrow
      for key in row:
          if key == " ":
              table += "<td border='0'>      </td>\n"
          else:
              table += "<td height='75px' width='75px'>" + format_key(key) + "</td>\n"
      table += "</tr>\n"

  table += "<tr>\n"
  table += "<td border='0'></td>\n"
  table += "<td border='0'></td>\n"
  table += "<td border='0'></td>\n"
  for key in in_layer_left_thumb[0][:-1]:
      if key == " ":
          table += "<td border='0'>      </td>\n"
      else:
          table += "<td height='75px' width='75px'>" + format_key(key) + "</td>\n"
  for key in in_layer_right_thumb[0][:-1]:
      table += "<td height='75px' width='75px'>" + format_key(key) + "</td>\n"
  table += "</tr>\n"
  return table
#+end_src

#+begin_src dot :file lily58.png :exports results :noweb yes
  digraph {
    rankdir="TB"    
    node [ shape=none ]

    base [ label = <
      <table border="0" cellborder="1" cellspacing="0" cellpadding="2">
        <<html-table-generator(in_layer_left=base-layer-left, in_layer_left_thumb=base-layer-left-thumb, in_layer_right=base-layer-right, in_layer_right_thumb=base-layer-right-thumb)>>
      </table>>
    ]

    num [ label = <
      <table border="0" cellborder="1" cellspacing="0" cellpadding="2">
        <<html-table-generator(in_layer_left=num-layer-left, in_layer_left_thumb=num-layer-left-thumb, in_layer_right=num-layer-right, in_layer_right_thumb=num-layer-right-thumb)>>
      </table>>
    ]

    nav [ label = <
      <table border="0" cellborder="1" cellspacing="0" cellpadding="2">
        <<html-table-generator(in_layer_left=navigation-layer-left, in_layer_left_thumb=navigation-layer-left-thumb, in_layer_right=navigation-layer-right, in_layer_right_thumb=navigation-layer-right-thumb)>>
      </table>>
    ]
    base -> num [style=invis]
    num -> nav [style=invis]
  }
#+end_src

#+ATTR_ORG: :width 700
#+RESULTS:
[[file:lily58.png]]

*** File generation
**** Keymap
#+name: layer-generator
#+begin_src python :session :var in_layer_left="None" :var in_layer_right="None" :var in_layer_left_thumb="None" :var in_layer_right_thumb="None" :results verbatim
  left_padding = 13


  def format_key(key, comma=True):
      if comma:
          return f"{key}, ".ljust(left_padding)
      else:
          return f"{key}".ljust(left_padding)


  def generate_left_keyboard(layer, layer_thumb):
      result = ""
      for i, row in enumerate(layer):
          for key in row:
              result += format_key(key)
          if i != len(layer) - 1:
              result += "\n"

      result += format_key(layer_thumb[0][-1])
      result += "\n"
      result += " " * 3 * left_padding
      for key in layer_thumb[0][:-1]:
          result += format_key(key)
      return result


  def generate_right_keyboard(layer, layer_thumb):
      result = ""
      for i, row in enumerate(layer):
          if i == 3:
              result += format_key(layer_thumb[0][0])
          else:
              result += " " * left_padding
          for key in row:
              result += format_key(key)
          if i != len(layer) - 1:
              result += "\n"

      result += "\n"
      for i, key in enumerate(layer_thumb[0][1:]):
          if i == len(layer_thumb[0][1:]) - 1:
            result += format_key(key, comma=False)
          else:
            result += format_key(key)
      return result


  def generate_keyboard(layer_left, layer_left_thumb, layer_right, layer_right_thumb):
      right = generate_left_keyboard(layer_left, layer_left_thumb).split("\n")
      left = generate_right_keyboard(layer_right, layer_right_thumb).split("\n")
      keyboard = ""
      for i, (r, l) in enumerate(zip(right, left)):
          if i < 3:
              keyboard += f'{r} {" " * left_padding} {l}\n'
          else:
              keyboard += f"{r}  {l}\n"
      return keyboard


  generate_keyboard(
      in_layer_left, in_layer_left_thumb, in_layer_right, in_layer_right_thumb
  )
#+end_src

#+begin_src C :main no :noweb yes :mkdirp yes :tangle ./lily58/keymap.c :mkdirp yes
  #include QMK_KEYBOARD_H

  enum layer_number {
    _BASE,
    _NUM,
    _NAV,
  };
  const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [_BASE] = LAYOUT(
      <<layer-generator(in_layer_left=base-layer-left, in_layer_left_thumb=base-layer-left-thumb, in_layer_right=base-layer-right, in_layer_right_thumb=base-layer-right-thumb)>>
    ),
    [_NUM] = LAYOUT(
      <<layer-generator(in_layer_left=num-layer-left, in_layer_left_thumb=num-layer-left-thumb, in_layer_right=num-layer-right, in_layer_right_thumb=num-layer-right-thumb)>>
    ),
    [_NAV] = LAYOUT(
      <<layer-generator(in_layer_left=navigation-layer-left, in_layer_left_thumb=navigation-layer-left-thumb, in_layer_right=navigation-layer-right, in_layer_right_thumb=navigation-layer-right-thumb)>>
    )
  };
#+end_src

**** Config
#+begin_src C :main no :noweb yes :mkdirp yes :tangle ./lily58/config.h :mkdirp yes
  #pragma once
  #define MASTER_RIGHT

  #define TAPPING_TERM 175
  #define AUTO_SHIFT_TIMEOUT 175
  #define AUTO_SHIFT_REPEAT
  #define NO_AUTO_SHIFT_SPECIAL
  #define NO_AUTO_SHIFT_NUMERIC

  #define IGNORE_MOD_TAP_INTERRUPT
#+end_src

**** Rules
#+begin_src C :main no :noweb yes :mkdirp yes :tangle ./lily58/rules.mk :mkdirp yes
  BOOTMAGIC_ENABLE = no      # Enable Bootmagic Lite
  MOUSEKEY_ENABLE = no       # Mouse keys
  EXTRAKEY_ENABLE =  yes     # Audio control and System control
  CONSOLE_ENABLE = no        # Console for debug
  COMMAND_ENABLE = no        # Commands for debug and configuration
  NKRO_ENABLE = no
  BACKLIGHT_ENABLE = no      # Enable keyboard backlight functionality
  AUDIO_ENABLE = no          # Audio output
  RGBLIGHT_ENABLE = no       # Enable WS2812 RGB underlight.
  SWAP_HANDS_ENABLE = no     # Enable one-hand typing
  OLED_ENABLE= no            # OLED display
  SPLIT_KEYBOARD = yes
#+end_src

