#+STARTUP: hideblocks
* QMK keyboard configs
Personal QMK configuration for [[https://github.com/foostan/crkbd][corne]] and [[https://github.com/kata0510/Lily58][lily58]] keyboards.

Structure inspired by:
- [[https://github.com/manna-harbour/miryoku_babel][Miryoky Babel]]
- [[https://github.com/Kranex/qmk-config][Kranex qmk config]]

Build:
1. run ~./flash.sh build~.
  
Usage:
1. define the keymap in tables;
2. run ~org-babel-tangle~;
3. (optional) execute the org babel ~#+CALL:~ cell to generate the the keymap images;
5. run ~./flash.sh flash lily~ or ~./flash.sh flash corne~ (add dialout group to the user before this step).

** Lily58
[[file:./lily58/layers/base.png]]
[[file:./lily58/layers/num.png]]
[[file:./lily58/layers/navigation.png]]

*** Base
#+NAME: lily58-base-layer
| ESC   | 1 | 2 | 3 | 4 | 5 |     |       | 6 | 7 | 8 | 9 | 0 | ESC  |
| G+TAB | Q | W | F | P | B |     |       | J | L | U | Y | ' | C+T  |
| LCTL  | A | R | S | T | G |     |       | M | N | E | I | O | ;    |
| CAPS  | Z | X | C | D | V | C+T | C+TAB | K | H | , | . | / | LSFT |

#+NAME: lily58-base-layer-thumb
| NO | _NAV/ESC | G/SPC | S/TAB | C/ENT | _NUM/BSPC | LALT | G+TAB |

*** Navigation
#+NAME: lily58-navigation-layer
| NO | NO | NO | NO | NO | NO |    |    | NO   | NO   | NO   | NO   | NO | NO |
| NO | NO | NO | NO | NO | NO |    |    | MPRV | VOLD | VOLU | MNXT | NO | NO |
| NO | NO | NO | NO | NO | NO |    |    | LEFT | DOWN | UP   | RGHT | NO | NO |
| NO | NO | NO | NO | NO | NO | NO | NO | HOME | END  | MPLY | MUTE | NO | NO |

#+NAME: lily58-navigation-layer-thumb
| NO | NO | TRNS | NO | ENT | BSPC | NO | NO |

*** Num
#+NAME: lily58-num-layer
| NO | F1 | F2 | F3 | F4 | F5 |    |    | F6   | F7 | F8 | F9 | F10 | NO     |
| NO | [  |  7 |  8 |  9 | ]  |    |    | {    | (  | *  | &  | }   | NO     |
| NO | 0  |  4 |  5 |  6 | =  |    |    | +    | ^  | %  | $  | )   | NO     |
| NO | `  |  1 |  2 |  3 | \  | NO | NO | PIPE | #  | @  | !  | ~   | QWERTY |

#+NAME: lily58-num-layer-thumb
| NO | _ | SPC | - | ENT | TRNS | NO | NO |

*** Qwerty
Mainly used for gaming.

#+NAME: lily58-qwerty-layer
| ESC  | 1 | 2 | 3 | 4 | 5 |    |    | 6 | 7 | 8 | 9 | 0 | NO   |
| TAB  | Q | W | E | R | T |    |    | Y | U | I | O | P | NO   |
| LCTL | A | S | D | F | G |    |    | H | J | K | L | ; | NO   |
| LSFT | Z | X | C | V | B | NO | NO | N | M | , | . | / | BASE |

#+NAME: lily58-qwerty-layer-thumb
| LGUI | LSFT | SPC | LALT | ENT | TRNS | NO | NO |

*** Visualization
#+NAME: x-pixels-lily58
| 20 | 80 | 137 | 190 | 243 | 294 |   0 |   0 | 510 | 564 | 618 | 668 | 723 | 774 |
| 20 | 80 | 137 | 190 | 243 | 294 |   0 |   0 | 510 | 564 | 618 | 668 | 723 | 774 |
| 20 | 80 | 137 | 190 | 243 | 294 |   0 |   0 | 510 | 564 | 618 | 668 | 723 | 774 |
| 20 | 80 | 137 | 190 | 243 | 294 | 342 | 450 | 510 | 564 | 618 | 668 | 723 | 774 |

#+NAME: x-pixels-thumb-lily58
| 155 | 206 | 263 | 340 | 467 | 530 | 585 | 638 |

#+NAME: y-pixels-lily58
|  45 |  38 |  27 |  22 |  27 |  38 |   0 |   0 |  38 |  27 |  22 |  27 |  38 |  45 |
| 100 |  93 |  82 |  77 |  82 |  93 |   0 |   0 |  93 |  82 |  77 |  82 |  93 | 100 |
| 155 | 148 | 137 | 132 | 137 | 148 |   0 |   0 | 148 | 137 | 132 | 137 | 148 | 155 |
| 210 | 203 | 192 | 187 | 192 | 203 | 168 | 168 | 203 | 192 | 187 | 192 | 203 | 210 |

#+NAME: y-pixels-thumb-lily58
| 240 | 240 | 245 | 255 | 255 | 245 | 240 | 240 |

*** File generation
**** Keymap
#+begin_src C :main no :noweb yes :mkdirp yes :tangle ./lily58/keymap.c :mkdirp yes :results none
  #include QMK_KEYBOARD_H

  enum layer_number {
    _BASE,
    _NUM,
    _NAV,
    _QWERTY
  };
  const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [_BASE] = LAYOUT(
      <<layer-generator(in_layer=lily58-base-layer, in_layer_thumb=lily58-base-layer-thumb)>>
    ),
    [_NUM] = LAYOUT(
      <<layer-generator(in_layer=lily58-num-layer, in_layer_thumb=lily58-num-layer-thumb)>>
    ),
    [_NAV] = LAYOUT(
      <<layer-generator(in_layer=lily58-navigation-layer, in_layer_thumb=lily58-navigation-layer-thumb)>>
    ),
    [_QWERTY] = LAYOUT(
      <<layer-generator(in_layer=lily58-qwerty-layer, in_layer_thumb=lily58-qwerty-layer-thumb)>>
    )
  };
#+end_src

**** Config
#+begin_src C :main no :noweb yes :mkdirp yes :tangle ./lily58/config.h :mkdirp yes :results none
  #pragma once
  #define MASTER_RIGHT

  #define TAPPING_TERM 175
  #define AUTO_SHIFT_TIMEOUT 175
  #define AUTO_SHIFT_REPEAT
  #define NO_AUTO_SHIFT_SPECIAL
  #define NO_AUTO_SHIFT_NUMERIC

  #define IGNORE_MOD_TAP_INTERRUPT
#+end_src

**** Rules
#+begin_src C :main no :noweb yes :mkdirp yes :tangle ./lily58/rules.mk :mkdirp yes :results none
  AUDIO_ENABLE = no          # Audio output
  BACKLIGHT_ENABLE = no      # Enable keyboard backlight functionality
  BOOTMAGIC_ENABLE = no      # Enable Bootmagic Lite
  COMMAND_ENABLE = no        # Commands for debug and configuration
  AUTO_SHIFT_ENABLE = no
  BLUETOOTH_ENABLE = no
  CONSOLE_ENABLE = no        # Console for debug
  EXTRAKEY_ENABLE =  yes     # Audio control and System control
  MOUSEKEY_ENABLE = no       # Mouse keys
  NKRO_ENABLE = no
  OLED_ENABLE= no            # OLED display
  RGBLIGHT_ENABLE = no       # Enable WS2812 RGB underlight.
  SPACE_CADET_ENABLE=no
  SPLIT_KEYBOARD = yes
  SWAP_HANDS_ENABLE = no     # Enable one-hand typing
  TAP_DANCE_ENABLE = no
#+end_src

** Corne
[[file:./corne-right/layers/base.png]]
[[file:./corne-right/layers/navigation.png]]
[[file:./corne-right/layers/num.png]]

*** Base
#+NAME: corne-base-layer
| G+TAB | Q | W | F | P | B | J | L | U | Y | ' | C+T   |
| LCTL  | A | R | S | T | G | M | N | E | I | O | ;     |
| CAPS  | Z | X | C | D | V | K | H | , | . | / | C+TAB |

#+NAME: corne-base-layer-thumb
| _NAV/ESC | G/SPC | S/TAB | C/ENT | _NUM/BSPC | LALT |

*** Navigation
#+NAME: corne-navigation-layer
| NO | NO | NO | NO    | NO     | NO    | MPRV | VOLD | VOLU | MNXT | NO | NO |
| NO | NO | NO | TR_PR | TR_SCR | TR_LC | LEFT | DOWN | UP   | RGHT | NO | NO |
| NO | NO | NO | NO    | NO     | NO    | HOME | END  | MPLY | MUTE | NO | NO |

#+NAME: corne-navigation-layer-thumb
| _NAV/ESC | G/SPC | S/TAB | C/ENT | BSPC | LALT |

*** Num
#+NAME: corne-num-layer
| NO | [ | 7 | 8 | 9 | ] | {    | ( | * | & | } | NO |
| NO | 0 | 4 | 5 | 6 | = | +    | ^ | % | $ | ) | NO |
| NO | ` | 1 | 2 | 3 | \ | PIPE | # | @ | ! | ~ | NO |

#+NAME: corne-num-layer-thumb
| _ | SPC | - | ENT | TRNS | NO |

*** Visualization
#+NAME: x-pixels-corne
| 20 | 75 | 132 | 185 | 238 | 289 | 510 | 564 | 618 | 668 | 723 | 774 |
| 20 | 75 | 132 | 185 | 238 | 289 | 510 | 564 | 618 | 668 | 723 | 774 |
| 20 | 75 | 132 | 185 | 238 | 289 | 510 | 564 | 618 | 668 | 723 | 774 |

#+NAME: x-pixels-thumb-corne
| 205 | 276 | 343 | 446 | 517 | 584 |

#+NAME: y-pixels-corne
|  45 |  38 |  27 |  22 |  27 |  38 |  38 |  27 |  22 |  27 |  38 |  45 |
| 100 |  93 |  82 |  77 |  82 |  93 |  93 |  82 |  77 |  82 |  93 | 100 |
| 155 | 148 | 137 | 132 | 137 | 148 | 148 | 137 | 132 | 137 | 148 | 155 |
| 210 | 203 | 192 | 187 | 192 | 203 | 203 | 192 | 187 | 192 | 203 | 210 |

#+NAME: y-pixels-thumb-corne
| 200 | 210 | 220 | 220 | 210 | 200 |

*** File generation right side
**** Keymap
#+begin_src C :main no :noweb yes :mkdirp yes :tangle ./corne-right/keymap.c :mkdirp yes :results none
  #include QMK_KEYBOARD_H
  #include <stdio.h>
  #include "keymap_us_international.h"

  // #include "g/keymap_combo.h"
  #ifdef PIMORONI_TRACKBALL_ENABLE
  #include "drivers/sensors/pimoroni_trackball.h"
  #include "pointing_device.h"
  bool set_scrolling = false;
  #define TRACKBALL_PRECISION 27500
  #define TRACKBALL_PRECISION_HIGH 17500
  #define TRACKBALL_PRECISION_SCROLLING 4000
  #endif
  #ifdef OLED_ENABLE
  #    define MIN_WALK_SPEED      10
  #    define MIN_RUN_SPEED       40
  #    define ANIM_FRAME_DURATION 200
  #    define ANIM_SIZE           96
  uint32_t anim_timer = 0;
  uint32_t anim_sleep = 0;
  uint8_t current_frame = 0;
  int   current_wpm = 0;
  #endif

  enum crkbd_layers {
      _BASE,
      _NAV,
      _NUM,
      _GAMING
  };

  enum custom_keycodes {
      BALL_LC = SAFE_RANGE,
      BALL_SCR,
      BALL_PRC,
  };

  const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [_BASE] = LAYOUT_split_3x6_3(
      <<layer-generator(in_layer=corne-base-layer, in_layer_thumb=corne-base-layer-thumb)>>
    ),
    [_NAV] = LAYOUT_split_3x6_3(
      <<layer-generator(in_layer=corne-navigation-layer, in_layer_thumb=corne-navigation-layer-thumb)>>
    ),
    [_NUM] = LAYOUT_split_3x6_3(
      <<layer-generator(in_layer=corne-num-layer, in_layer_thumb=corne-num-layer-thumb)>>
    )
  };


  bool process_record_user(uint16_t keycode, keyrecord_t *record) {
      switch (keycode){
  #ifdef PIMORONI_TRACKBALL_ENABLE
          case BALL_LC:
              record->event.pressed?register_code(KC_BTN1):unregister_code(KC_BTN1);
              break;
          case BALL_SCR:
              if(record->event.pressed){
                  set_scrolling = true;
                  pimoroni_trackball_set_cpi(TRACKBALL_PRECISION_SCROLLING);
              } else{
                  set_scrolling = false;
                  pimoroni_trackball_set_cpi(TRACKBALL_PRECISION);
              }
          break;
          case BALL_PRC:
              if(record->event.pressed){
                  pimoroni_trackball_set_cpi(TRACKBALL_PRECISION_SCROLLING);
              } else{
                  pimoroni_trackball_set_cpi(TRACKBALL_PRECISION);
              }
          break;
  #endif
          default:
          break;
      }
    return true;
  }

  #ifdef PIMORONI_TRACKBALL_ENABLE
  report_mouse_t pointing_device_task_user(report_mouse_t mouse_report) {
      if (set_scrolling) {
          mouse_report.h = mouse_report.x;
          mouse_report.v = mouse_report.y;
          mouse_report.x = mouse_report.y = 0;
      }
      return mouse_report;
  }
  #endif

  void keyboard_post_init_user(void) {
  #ifdef PIMORONI_TRACKBALL_ENABLE
      pimoroni_trackball_set_cpi(TRACKBALL_PRECISION);
      pimoroni_trackball_set_rgbw(0,0,0,80);
  #endif
  }

  #ifdef PIMORONI_TRACKBALL_ENABLE
  layer_state_t layer_state_set_user(layer_state_t state) {
      // autoshift_enable();
      switch (get_highest_layer(state)) {
      case _BASE:
          pimoroni_trackball_set_rgbw(0,0,0,80);
          break;
      case _NAV:
          pimoroni_trackball_set_rgbw(0,153,95,0);
          break;
      case _NUM:
          pimoroni_trackball_set_rgbw(153,113,0,0);
          break;
      default:
          pimoroni_trackball_set_rgbw(0,0,0,80);
          break;
      }
    return state;
  }
  #endif

  #ifdef OLED_ENABLE
  oled_rotation_t oled_init_user(oled_rotation_t rotation) { return OLED_ROTATION_270; }

  static void render_luna(int LUNA_X, int LUNA_Y) {
      /* Sit */
      static const char PROGMEM sit[2][ANIM_SIZE] = {/* 'sit1', 32x22px */
                                                     {
                                                         0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x1c, 0x02, 0x05, 0x02, 0x24, 0x04, 0x04, 0x02, 0xa9, 0x1e, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x10, 0x08, 0x68, 0x10, 0x08, 0x04, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x06, 0x82, 0x7c, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x04, 0x0c, 0x10, 0x10, 0x20, 0x20, 0x20, 0x28, 0x3e, 0x1c, 0x20, 0x20, 0x3e, 0x0f, 0x11, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                     },

                                                     /* 'sit2', 32x22px */
                                                     {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x1c, 0x02, 0x05, 0x02, 0x24, 0x04, 0x04, 0x02, 0xa9, 0x1e, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x90, 0x08, 0x18, 0x60, 0x10, 0x08, 0x04, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x0e, 0x82, 0x7c, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x04, 0x0c, 0x10, 0x10, 0x20, 0x20, 0x20, 0x28, 0x3e, 0x1c, 0x20, 0x20, 0x3e, 0x0f, 0x11, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}};

      /* Walk */
      static const char PROGMEM walk[2][ANIM_SIZE] = {/* 'walk1', 32x22px */
                                                      {
                                                          0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x40, 0x20, 0x10, 0x90, 0x90, 0x90, 0xa0, 0xc0, 0x80, 0x80, 0x80, 0x70, 0x08, 0x14, 0x08, 0x90, 0x10, 0x10, 0x08, 0xa4, 0x78, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x08, 0xfc, 0x01, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x18, 0xea, 0x10, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x1c, 0x20, 0x20, 0x3c, 0x0f, 0x11, 0x1f, 0x03, 0x06, 0x18, 0x20, 0x20, 0x3c, 0x0c, 0x12, 0x1e, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                      },

                                                      /* 'walk2', 32x22px */
                                                      {
                                                          0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x40, 0x20, 0x20, 0x20, 0x40, 0x80, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x10, 0x28, 0x10, 0x20, 0x20, 0x20, 0x10, 0x48, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x20, 0xf8, 0x02, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x10, 0x30, 0xd5, 0x20, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x20, 0x30, 0x0c, 0x02, 0x05, 0x09, 0x12, 0x1e, 0x02, 0x1c, 0x14, 0x08, 0x10, 0x20, 0x2c, 0x32, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                      }};

      /* Run */
      static const char PROGMEM run[2][ANIM_SIZE] = {/* 'run1', 32x22px */
                                                     {
                                                         0x00, 0x00, 0x00, 0x00, 0xe0, 0x10, 0x08, 0x08, 0xc8, 0xb0, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x40, 0x40, 0x3c, 0x14, 0x04, 0x08, 0x90, 0x18, 0x04, 0x08, 0xb0, 0x40, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0xc4, 0xa4, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc8, 0x58, 0x28, 0x2a, 0x10, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x09, 0x04, 0x04, 0x04, 0x04, 0x02, 0x03, 0x02, 0x01, 0x01, 0x02, 0x02, 0x04, 0x08, 0x10, 0x26, 0x2b, 0x32, 0x04, 0x05, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                     },

                                                     /* 'run2', 32x22px */
                                                     {
                                                         0x00, 0x00, 0x00, 0xe0, 0x10, 0x10, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x78, 0x28, 0x08, 0x10, 0x20, 0x30, 0x08, 0x10, 0x20, 0x40, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x04, 0x08, 0x10, 0x11, 0xf9, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x10, 0xb0, 0x50, 0x55, 0x20, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x02, 0x0c, 0x10, 0x20, 0x28, 0x37, 0x02, 0x1e, 0x20, 0x20, 0x18, 0x0c, 0x14, 0x1e, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                     }};

      /* animation */
      void animate_luna(void) {
          /* jump */
              oled_set_cursor(LUNA_X, LUNA_Y - 1);
              oled_write("     ", false);

              oled_set_cursor(LUNA_X, LUNA_Y);

          /* switch frame */
          current_frame = (current_frame + 1) % 2;

          if (current_wpm <= MIN_WALK_SPEED) {
              oled_write_raw_P(sit[abs(1 - current_frame)], ANIM_SIZE);

          } else if (current_wpm <= MIN_RUN_SPEED) {
              oled_write_raw_P(walk[abs(1 - current_frame)], ANIM_SIZE);

          } else {
              oled_write_raw_P(run[abs(1 - current_frame)], ANIM_SIZE);
          }
      }

      /* animation timer */
      if (timer_elapsed32(anim_timer) > ANIM_FRAME_DURATION) {
          anim_timer = timer_read32();
          animate_luna();
      }

      /* this fixes the screen on and off bug */
      if (current_wpm > 0) {
          oled_on();
          anim_sleep = timer_read32();
      } else if (timer_elapsed32(anim_sleep) > OLED_TIMEOUT) {
          oled_off();
      }
  }
  static void print_status_narrow(void) {
      render_luna(0, 0);
      oled_set_cursor(17, 0);
      uint8_t n = get_current_wpm();
      char    wpm_str[4];
      wpm_str[3] = '\0';
      wpm_str[2] = '0' + n % 10;
      wpm_str[1] = '0' + (n /= 10) % 10;
      wpm_str[0] = '0' + n / 10;
      oled_write(wpm_str, false);
  }

  bool oled_task_user(void) {
      current_wpm   = get_current_wpm();
      if (is_keyboard_master()) {
          print_status_narrow();
      } else {
      }
      return false;
  }
  #endif
#+end_src

**** Config
#+begin_src C :main no :noweb yes :mkdirp yes :tangle ./corne-right/config.h :mkdirp yes :results none
  #pragma once

  #define MASTER_RIGHT

  // Pimoroni trackball
  #define PIMORONI_TRACKBALL_ENABLE
  #define PIMORONI_TRACKBALL_CLICK
  #define PIMORONI_TRACKBALL_ROTATE
  // #define PIMORONI_TRACKBALL_INVERT_X

  #define USE_SERIAL_PD2

  // Combo feature timeout (defaults to TAPPING_TERM)
  // #define COMBO_TERM 50
  // Size of combo_events enum.
  // #define COMBO_VARIABLE_LEN

  #define TAPPING_FORCE_HOLD
  #define TAPPING_TERM 175
  #define AUTO_SHIFT_TIMEOUT 175
  #define AUTO_SHIFT_REPEAT
  #define NO_AUTO_SHIFT_SPECIAL
  #define NO_AUTO_SHIFT_NUMERIC

  // Prevent normal rollover on alphas from accidentally triggering mods.
  #define IGNORE_MOD_TAP_INTERRUPT

  #define SPLIT_OLED_ENABLE
  #define OLED_FONT_H "keyboards/crkbd/lib/glcdfont.c"

  // otimizations
  #define NO_ACTION_MACRO
  #define NO_ACTION_FUNCTION
  #ifndef NO_DEBUG
  #    define NO_DEBUG
  #endif  // !NO_DEBUG
  #if !defined(NO_PRINT) && !defined(CONSOLE_ENABLE)
  #    define NO_PRINT
  #endif  // !NO_PRINT
  #define NO_ACTION_ONESHOT
  #define NO_MUSIC_MODE
#+end_src

**** Rules
#+begin_src C :main no :noweb yes :mkdirp yes :tangle ./corne-right/rules.mk :mkdirp yes :results none
  AUDIO_ENABLE = no
  AUTO_SHIFT_ENABLE = no
  BLUETOOTH_ENABLE = no
  CONSOLE_ENABLE = no
  EXTRAFLAGS+=-flto
  OLED_DRIVER = SSD1306
  OLED_ENABLE = yes
  SPACE_CADET_ENABLE=no
  SPLIT_KEYBOARD = yes
  TAP_DANCE_ENABLE = no
  WPM_ENABLE = yes
  # COMBO_ENABLE = yes
  # VPATH += keyboards/gboards

  PIMORONI_TRACKBALL_ENABLE = yes
  ifeq ($(strip $(PIMORONI_TRACKBALL_ENABLE)), yes)
          POINTING_DEVICE_ENABLE = yes
          POINTING_DEVICE_DRIVER = pimoroni_trackball
          PIMORONI_TRACKBALL_ADDRESS = 0x0B
          SRC += drivers/sensors/pimoroni_trackball.c
          QUANTUM_LIB_SRC += i2c_master.c
  endif
#+end_src

*** File generation left side
**** Keymap
#+begin_src C :main no :noweb yes :mkdirp yes :tangle ./corne-left/keymap.c :mkdirp yes :results none
  #include QMK_KEYBOARD_H
  #include <stdio.h>
  #include "keymap_us_international.h"

  #ifdef OLED_ENABLE
  #include "oled.c"
  #endif

  enum crkbd_layers {
      _BASE,
      _NAV,
      _NUM,
      _MEDIA
  };

  enum trackball_keycodes {
      BALL_LC = SAFE_RANGE,
      BALL_SCR,
      BALL_PRC,
  };

  const uint16_t PROGMEM keymaps[][MATRIX_ROWS][MATRIX_COLS] = {
    [_BASE] = LAYOUT_split_3x6_3(
      <<layer-generator(in_layer=corne-base-layer, in_layer_thumb=corne-base-layer-thumb)>>
    ),
    [_NAV] = LAYOUT_split_3x6_3(
      <<layer-generator(in_layer=corne-navigation-layer, in_layer_thumb=corne-navigation-layer-thumb)>>
    ),
    [_NUM] = LAYOUT_split_3x6_3(
      <<layer-generator(in_layer=corne-num-layer, in_layer_thumb=corne-num-layer-thumb)>>
    )
  };

  bool process_record_user(uint16_t keycode, keyrecord_t *record) {
      switch (keycode){
          default:
  #ifdef OLED_ENABLE
          if (record->event.pressed) {
              oled_timer = timer_read();
          }
  #endif
          break;
      }
    return true;
  }

  void keyboard_post_init_user(void) {
  }
#+end_src

**** Config
#+begin_src C :main no :noweb yes :mkdirp yes :tangle ./corne-left/config.h :mkdirp yes :results none

  #pragma once

  #define MASTER_RIGHT

  #define USE_SERIAL_PD2

  #define TAPPING_FORCE_HOLD
  #define TAPPING_TERM 175
  #define AUTO_SHIFT_TIMEOUT 150
  #define AUTO_SHIFT_NO_AUTO_REPEAT

  // Prevent normal rollover on alphas from accidentally triggering mods.
  #define IGNORE_MOD_TAP_INTERRUPT

  #define SPLIT_OLED_ENABLE
  #define OLED_FONT_H "keyboards/crkbd/lib/glcdfont.c"

  // otimizations
  #define NO_ACTION_MACRO
  #define NO_ACTION_FUNCTION
  #ifndef NO_DEBUG
  #define NO_DEBUG
  #endif // !NO_DEBUG
  #if !defined(NO_PRINT) && !defined(CONSOLE_ENABLE)
  #define NO_PRINT
  #endif // !NO_PRINT
  #define NO_ACTION_ONESHOT
  #define NO_MUSIC_MODE
#+end_src

**** Rules
#+begin_src C :main no :noweb yes :mkdirp yes :tangle ./corne-left/rules.mk :mkdirp yes :results none
  OLED_ENABLE = yes
  OLED_DRIVER = SSD1306
  SPLIT_KEYBOARD = yes
  AUTO_SHIFT_ENABLE = yes
  TAP_DANCE_ENABLE = no
  BLUETOOTH_ENABLE = no
  CONSOLE_ENABLE = no
  AUDIO_ENABLE = no
  SPACE_CADET_ENABLE=no
  EXTRAFLAGS+=-flto
#+end_src

**** Oled
#+begin_src C :main no :noweb yes :mkdirp yes :tangle ./corne-left/oled.c :mkdirp yes :results none
#pragma once

#include "progmem.h"
#include "animation.c"

extern uint8_t  is_master;
static uint16_t oled_timer = 0;

oled_rotation_t oled_init_user(oled_rotation_t rotation) { return OLED_ROTATION_270; }

void render_animation(uint8_t frame) { oled_write_raw_P(animation[frame], sizeof(animation[frame])); }


bool oled_task_user(void) {
    if (is_keyboard_master()) {
        render_animation((timer_read() / 60) % 8);
    } else {
        render_animation((timer_read() / 60) % 8);
    }
    return false;
}
#+end_src

**** Animation
#+begin_src C :main no :noweb yes :mkdirp yes :tangle ./corne-left/animation.c :mkdirp yes :results none
  #include "progmem.h"

  static const char PROGMEM animation[][512] = {{// 'frame1', 32x128px
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2f, 0x29, 0xef, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa5, 0x65, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0xcc, 0x8c, 0xde, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x77, 0x98, 0x88, 0x9d, 0x77, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x80, 0xc0, 0xc0, 0xc0, 0xe0, 0xe0, 0xe0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xff, 0xf9, 0xf8, 0xf9, 0xff, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xe0, 0xe0, 0xe0, 0xc0, 0xc0, 0x80, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0x7f, 0x7f, 0xff, 0xff, 0x7f, 0x7f, 0x7f, 0xff, 0xff, 0x7f, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x0f, 0x07, 0x07, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x80, 0xf0, 0xff, 0xbf, 0xb7, 0xf3, 0xb7, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x07, 0x0f, 0x1f, 0x00, 0x00, 0x00, 0x80, 0xe0, 0xf0, 0xfc, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xbf, 0x3f, 0x3f, 0x3f, 0x3f, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfc, 0xf8, 0xf0, 0xe0, 0x80, 0x00, 0x00,
                                                 0x00, 0x00, 0xfc, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0x1f, 0x3d, 0x71, 0x63, 0x63, 0x63, 0x63, 0x63, 0x71, 0x3d, 0x9f, 0xff, 0xff, 0xff, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x07, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xf1, 0xc7, 0x8f, 0x0f, 0x1e, 0x1c, 0x1c, 0x38, 0x38, 0x3c, 0x1c, 0x1c, 0x1e, 0x0f, 0x8f, 0xc3, 0xf1, 0xff, 0xff, 0xff, 0x7f, 0x1f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x0f, 0x0f, 0x1f, 0x1f, 0x1f, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x3e, 0x1e, 0x1f, 0x1f, 0x1f, 0x0f, 0x07, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xf0, 0xe0, 0xe0, 0xc0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0xc0, 0xe0, 0xf0, 0xf8,
                                                 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x01, 0x03, 0x03, 0x03, 0x07, 0x07, 0x07, 0x07, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x07, 0x07, 0x07, 0x07, 0x03, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
                                                {// 'frame2', 32x128px
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5a, 0x52, 0xde, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0xeb, 0xc6, 0xab, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x94, 0x88, 0x95, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xe0, 0xe0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xfe, 0xf9, 0xf9, 0xf9, 0xfe, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf8, 0xf0, 0xf0, 0xf0, 0xf0, 0xe0, 0xe0,
                                                 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x0f, 0x0f, 0x07, 0x07, 0x03, 0x03, 0x03, 0x01, 0x01, 0x01, 0x01, 0x00, 0xe4, 0xff, 0xd9, 0x79, 0xd9, 0xff, 0x60, 0x01, 0x01, 0x01, 0x01, 0x01, 0x03, 0x03, 0x03, 0x07, 0x07, 0x0f, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0xc0, 0xf0, 0xff, 0xfd, 0xf7, 0xf7, 0xf7, 0xfd, 0xff, 0xe0, 0xc0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xf0, 0xf8, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfc, 0xf8, 0xe0, 0xc0, 0x00,
                                                 0x00, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xdf, 0x3f, 0x79, 0x63, 0xe7, 0xc6, 0xc6, 0xc6, 0xe7, 0x73, 0x79, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x0f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xf1, 0xc7, 0x0f, 0x1f, 0x1e, 0x3c, 0x38, 0x38, 0x78, 0x78, 0x78, 0x38, 0x38, 0x3c, 0x1e, 0x1f, 0x8f, 0xc3, 0xf0, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x0f, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x0f, 0x1f, 0x1f, 0x3f, 0x3f, 0x7e, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7c, 0x7e, 0x3f, 0x3f, 0x1f, 0x1f, 0x0f, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0xfc, 0xf8, 0xf8, 0xf0, 0xe0, 0xe0, 0xe0, 0xc0, 0xc0, 0xc0, 0xc0, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xc0, 0xc0, 0xc0, 0xc0, 0xe0, 0xe0, 0xf0, 0xf0, 0xf8, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x03, 0x03, 0x03, 0x07, 0x07, 0x07, 0x07, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x0f, 0x07, 0x07, 0x07, 0x07, 0x03, 0x03, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
                                                {// 'frame3', 32x128px
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x94, 0x62, 0x9c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xc0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xf0, 0xf0, 0xf1, 0xfa, 0xfc, 0xfb, 0xf0, 0xf0, 0xf0, 0xf0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xc0, 0xc0, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0x7f, 0x7f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0xff, 0x3f, 0x3f, 0x3f, 0xff, 0x3f, 0x3f, 0x3f, 0x3f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0xff,
                                                 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x33, 0x33, 0x33, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe4, 0xff, 0xbb, 0xfb, 0xbb, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0xc0, 0xc0, 0xe0, 0xe0, 0xe0, 0xff, 0xff, 0xe6, 0xf6, 0xe6, 0xff, 0xff, 0xe0, 0xe0, 0xe0, 0xc0, 0xc0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xe0, 0xf8, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfc, 0xf0, 0xe0,
                                                 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfd, 0xff, 0xff, 0xff, 0x3f, 0x7f, 0xf3, 0xe7, 0xc6, 0xc6, 0xcc, 0xc6, 0xc6, 0xe7, 0xf3, 0x7f, 0xbf, 0xff, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe0, 0x83, 0x0f, 0x1f, 0x3f, 0x7c, 0x78, 0x70, 0xf1, 0xf1, 0xf1, 0xf1, 0x71, 0x70, 0x78, 0x3c, 0x3f, 0x1f, 0x0f, 0x83, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x01, 0x03, 0x0f, 0x1f, 0x3f, 0x3f, 0x7f, 0xff, 0xfe, 0xfc, 0xf8, 0xf8, 0xf8, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf8, 0xf8, 0xf8, 0xfc, 0xfe, 0x7f, 0x7f, 0x3f, 0x3f, 0x1f, 0x0f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xe0, 0xe0, 0xe0, 0xc0, 0xc0, 0xc0, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xc0, 0xc0, 0xc0, 0xe0, 0xe0, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f},
                                                {// 'frame4', 32x128px
                                                 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x0f, 0x0f, 0x0f, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x03, 0x63, 0x97, 0x97, 0xf7, 0x03, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x0f, 0x0f, 0x0f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0x32, 0x31, 0x3a, 0xc4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdc, 0x33, 0x23, 0x33, 0xcc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfd, 0x22, 0x32, 0x22, 0xfd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0xff, 0xf3, 0xd3, 0xf3, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0xe0, 0xf0, 0xf0, 0xf0, 0xf8, 0xf8, 0xff, 0xfb, 0xff, 0xfc, 0xff, 0xfb, 0xff, 0xf8, 0xf8, 0xf0, 0xf0, 0xf0, 0xe0, 0xe0, 0xc0, 0x80, 0x00, 0x00, 0x00, 0xf8, 0xfc, 0xfe, 0xff, 0xff, 0xff, 0x7f, 0xdf, 0xef, 0xf7, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0xdf, 0xdf, 0xdf, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0xf7, 0xef, 0xdf, 0x7f, 0xff, 0xff, 0xff, 0xfe, 0xfc,
                                                 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xff, 0xe7, 0xce, 0x8c, 0x8c, 0x8c, 0x8c, 0x8c, 0xcf, 0xe7, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x03, 0x0f, 0x3f, 0x3f, 0x7c, 0xf8, 0xf1, 0xe1, 0xe1, 0xe3, 0xe3, 0xe3, 0xe1, 0xe1, 0xf1, 0xf8, 0x7e, 0x3f, 0x1f, 0x0f, 0x03, 0xe0, 0xff, 0xff, 0xff, 0xff, 0x07, 0x0f, 0x3f, 0x7f, 0xff, 0xff, 0xff, 0xfe, 0xf8, 0xf8, 0xf0, 0xf0, 0xe0, 0xe0, 0xe1, 0xe1, 0xe1, 0xe1, 0xe1, 0xe0, 0xe0, 0xf0, 0xf0, 0xf8, 0xfc, 0xfe, 0xff, 0xff, 0x7f, 0x7f, 0x1f, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x03, 0x03, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x03, 0x03, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xe0, 0xc0, 0xc0, 0xc0, 0xc0, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0x80, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xe0},
                                                {// 'frame5', 32x128px
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x69, 0x4a, 0x79, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0xa9, 0x19, 0xaf, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0x53, 0x23, 0x56, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xdd, 0x66, 0x22, 0x67, 0x99, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x66, 0x66, 0x66, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x7f, 0xf6, 0xf6, 0xf6, 0xff, 0xc8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0xf0, 0xf8, 0xf8, 0xfc, 0xfc, 0xfc, 0xfe, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfe, 0xfc, 0xfc, 0xf8, 0xf8, 0xf0, 0xf0, 0xe0, 0xc0, 0x80, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x1f, 0x8f, 0xe7, 0xf3, 0xfb, 0xf9, 0xfd, 0xff, 0xff, 0xdf, 0xdf, 0x9f, 0xdf, 0xff, 0x7f, 0xff, 0xfd, 0xf9, 0xfb, 0xf3, 0xe7, 0x8f, 0x3f, 0xff, 0xff, 0xff, 0xff,
                                                 0xff, 0xff, 0xff, 0x07, 0x00, 0xfe, 0xff, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xcf, 0x8e, 0x9c, 0x18, 0x18, 0x18, 0x9c, 0x8e, 0xcf, 0xff, 0xff, 0x3f, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x80, 0x03, 0x0f, 0x3f, 0x7f, 0xff, 0xf8, 0xf1, 0xe3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xe1, 0xf1, 0xf8, 0xff, 0x7f, 0x3f, 0x0f, 0x01, 0x80, 0xf8, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xf8, 0xf0, 0xe0, 0xc0, 0xc0, 0x81, 0x81, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x83, 0x81, 0xc1, 0xc0, 0xe0, 0xe0, 0xf0, 0xf8, 0xfe, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x01, 0x03, 0x07, 0x07, 0x0f, 0x0f, 0x1f, 0x1f, 0x1f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x1f, 0x1f, 0x1f, 0x0f, 0x0f, 0x07, 0x07, 0x03, 0x01, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
                                                {// 'frame6', 32x128px
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x8a, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x84, 0x2a, 0x31, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x98, 0x65, 0x64, 0x65, 0x88, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb9, 0x46, 0x44, 0xe6, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfb, 0x44, 0xc4, 0x44, 0xfb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0x80, 0xc0, 0xc0, 0xf8, 0xff, 0xee, 0xea, 0xe6, 0xff, 0xd0, 0xc0, 0xc0, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xf8, 0xfc, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfc, 0xf8, 0xff, 0xff, 0xff, 0x1f, 0x0f, 0x83, 0xc1, 0xf1, 0xf0, 0xf8, 0xfc, 0xfe, 0xff, 0xff, 0x9f, 0x9f, 0x9f, 0x9f, 0xdf, 0xff, 0xff, 0xfc, 0xfc, 0xf8, 0xf0, 0xe1, 0xc3, 0x07, 0x0f, 0x3f, 0xff, 0xff,
                                                 0xff, 0x1f, 0x00, 0x00, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe7, 0x8f, 0x1c, 0x19, 0x39, 0x39, 0x39, 0x19, 0x1c, 0x8f, 0xf7, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x3f, 0xff, 0xf8, 0x80, 0x00, 0x01, 0x1f, 0x3f, 0xff, 0xff, 0xf8, 0xe1, 0xc3, 0xc3, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0x87, 0xc3, 0xe3, 0xf1, 0xfc, 0xff, 0x7f, 0x3f, 0x0f, 0x01, 0x00, 0x80, 0xfe, 0xff, 0xff, 0xff, 0xfc, 0xf0, 0xe0, 0xc0, 0x80, 0x01, 0x01, 0x03, 0x03, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x03, 0x03, 0x01, 0x80, 0x80, 0xc0, 0xe0, 0xf0, 0xfc, 0xff, 0xff, 0x07, 0x0f, 0x1f, 0x3f, 0x3f, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0xfc, 0xfc, 0xfc, 0xfe, 0xfe, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0x7f, 0x3f, 0x3f, 0x1f, 0x0f,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
                                                {// 'frame7', 32x128px
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb7, 0x14, 0xf7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x52, 0x52, 0x5e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0xce, 0x46, 0xef, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf3, 0xcc, 0x84, 0xcc, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xc8, 0xcc, 0xc8, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xe0, 0xe0, 0xf0, 0xf0, 0xf0, 0xf8, 0xf8, 0xf8, 0xf8, 0xfc, 0xfc, 0xfc, 0xff, 0xfc, 0xfc, 0xfc, 0xff, 0xfc, 0xfc, 0xfc, 0xf8, 0xf8, 0xf8, 0xf8, 0xf0, 0xf0, 0xe0, 0xe0, 0xc0, 0xc0, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x3f, 0x1f, 0x1f, 0x1f, 0x0f, 0x0f, 0xcf, 0xff, 0xff, 0xdf, 0xdf, 0xdf, 0xff, 0xff, 0xcf, 0x0f, 0x0f, 0x1f, 0x1f, 0x3f, 0x3f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0x3f, 0x0f, 0x03, 0x01, 0x00, 0xc0, 0xe0, 0xf0, 0xf8, 0xfc, 0xfc, 0xfe, 0xff, 0xdf, 0x9f, 0x1f, 0x1f, 0x1f, 0x9f, 0xdf, 0xff, 0xfe, 0xfc, 0xfc, 0xf8, 0xf0, 0xe0, 0xc0, 0x00, 0x01, 0x03, 0x0f,
                                                 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xcf, 0x1e, 0x39, 0x31, 0x33, 0x33, 0x33, 0x31, 0x39, 0x9f, 0xcf, 0xff, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x1f, 0x7f, 0xff, 0xff, 0xfc, 0xf1, 0xc3, 0x87, 0x87, 0x0f, 0x0e, 0x0e, 0x0e, 0x0e, 0x0e, 0x0f, 0x87, 0x87, 0xc3, 0xf1, 0xfe, 0xff, 0xff, 0x7f, 0x1f, 0x00, 0x00, 0x00, 0xfe, 0xf8, 0xe0, 0x80, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x07, 0x0f, 0x0f, 0x0f, 0x0f, 0x1f, 0x1f, 0x1f, 0x0f, 0x0f, 0x0f, 0x0f, 0x07, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0xc0, 0xe0, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfc, 0xf8, 0xf8, 0xf8, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf0, 0xf8, 0xf8, 0xf8, 0xfc, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff,
                                                 0x00, 0x01, 0x03, 0x03, 0x07, 0x07, 0x07, 0x0f, 0x0f, 0x0f, 0x0f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x1f, 0x0f, 0x0f, 0x0f, 0x0f, 0x07, 0x07, 0x03, 0x03, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
                                                {// 'frame8', 32x128px
                                                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2d, 0x29, 0xe7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0xe5, 0x65, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, 0xce, 0x8c, 0xca, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x77, 0x88, 0x88, 0x9d, 0x77, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0x80, 0x80, 0x80, 0xc0, 0xc0, 0xc0, 0xc0, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xff, 0xe8, 0xf8, 0xe9, 0xff, 0xe0, 0xe0, 0xe0, 0xe0, 0xe0, 0xc0, 0xc0, 0xc0, 0xc0, 0x80, 0x80, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x3f, 0x1f, 0x0f, 0x07, 0x03, 0x03, 0x01, 0x01, 0x01, 0x00, 0x00, 0xf0, 0xff, 0xbf, 0xb3, 0x93, 0xb3, 0xbf, 0xff, 0xc0, 0x00, 0x00, 0x01, 0x01, 0x01, 0x03, 0x07, 0x07, 0x0f, 0x1f, 0x3f, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xe0, 0xf8, 0xf8, 0xfc, 0xfe, 0xfe, 0xff, 0xff, 0x9f, 0x1f, 0x3f, 0x3f, 0x3f, 0x1f, 0xdf, 0xff, 0xff, 0xfe, 0xfe, 0xfc, 0xf8, 0xf0, 0xe0, 0xc0, 0x00, 0x00, 0x00,
                                                 0x00, 0x00, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0x3d, 0x73, 0x73, 0x63, 0x63, 0x63, 0x73, 0x39, 0x3f, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00, 0x00, 0x03, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xf1, 0xc3, 0x87, 0x0f, 0x0e, 0x1e, 0x1c, 0x1c, 0x1c, 0x1c, 0x1c, 0x1e, 0x0f, 0x0f, 0x87, 0xc3, 0xf0, 0xff, 0xff, 0xff, 0xff, 0x1f, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03, 0x07, 0x0f, 0x0f, 0x1f, 0x1f, 0x3e, 0x3e, 0x3e, 0x3e, 0x3c, 0x3e, 0x3e, 0x3e, 0x3e, 0x1f, 0x1f, 0x0f, 0x0f, 0x07, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0xff, 0xfc, 0xf8, 0xf0, 0xf0, 0xe0, 0xc0, 0xc0, 0x80, 0x80, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x80, 0xc0, 0xc0, 0xc0, 0xe0, 0xf0, 0xf8, 0xf8, 0xfe,
                                                 0x3f, 0x7f, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}};
#+end_src
** Visualization
#+name: image-manipulation
#+begin_src python :var layer_name="Base" :var img_path="./lily58/layers/base.png" :var base_img="./assets/lily58.png" :var in_layer=lily58-base-layer :var in_layer_thumb=lily58-base-layer-thumb :var x_pixels=x-pixels-lily58 :var x_pixels_thumb=x-pixels-thumb-lily58 :var y_pixels=y-pixels-lily58 :var y_pixels_thumb=y-pixels-thumb-lily58 :results none
  from PIL import Image, ImageDraw, ImageFont


  def format_key(key):
      if key == "PIPE":
          return "|"
      elif key == "NO":
          return ""
      else:
          return str(key)


  img = Image.open(base_img)
  draw = ImageDraw.Draw(img)
  font = ImageFont.truetype("./assets/FreeMono.ttf", size=14)

  for ir, row in enumerate(in_layer):
      for ic, key in enumerate(row):
          x = x_pixels[ir][ic]
          y = y_pixels[ir][ic]
          draw.text((x, y), format_key(key), fill=(0, 0, 0), font=font)

  for ik, key in enumerate(in_layer_thumb[0]):
      x = x_pixels_thumb[0][ik]
      y = y_pixels_thumb[0][ik]
      draw.text((x, y), format_key(key), fill=(0, 0, 0), font=font)


  font = ImageFont.truetype("./assets/FreeMono.ttf", size=28)
  if layer_name == "Num" or layer_name == "Nav":
      draw.text((386, 80), layer_name, fill=(236, 239, 244), font=font)
  elif layer_name == "Base":
      draw.text((381, 80), layer_name, fill=(236, 239, 244), font=font)
  img.save(img_path)
#+end_src

#+CALL: image-manipulation(layer_name="Base", img_path="./lily58/layers/base.png", base_img="./assets/lily58.png", in_layer=lily58-base-layer, in_layer_thumb=lily58-base-layer-thumb, x_pixels=x-pixels-lily58, x_pixels_thumb=x-pixels-thumb-lily58, y_pixels=y-pixels-lily58, y_pixels_thumb=y-pixels-thumb-lily58)

#+CALL: image-manipulation(layer_name="Nav", img_path="./lily58/layers/navigation.png", base_img="./assets/lily58.png", in_layer=lily58-navigation-layer, in_layer_thumb=lily58-navigation-layer-thumb, x_pixels=x-pixels-lily58, x_pixels_thumb=x-pixels-thumb-lily58, y_pixels=y-pixels-lily58, y_pixels_thumb=y-pixels-thumb-lily58)

#+CALL: image-manipulation(layer_name="Nav", img_path="./lily58/layers/num.png", base_img="./assets/lily58.png", in_layer=lily58-num-layer, in_layer_thumb=lily58-num-layer-thumb, x_pixels=x-pixels-lily58, x_pixels_thumb=x-pixels-thumb-lily58, y_pixels=y-pixels-lily58, y_pixels_thumb=y-pixels-thumb-lily58)

#+CALL: image-manipulation(layer_name="Base", img_path="./corne-right/layers/base.png", base_img="./assets/corne.png", in_layer=corne-base-layer, in_layer_thumb=corne-base-layer-thumb, x_pixels=x-pixels-corne, x_pixels_thumb=x-pixels-thumb-corne, y_pixels=y-pixels-corne, y_pixels_thumb=y-pixels-thumb-corne)

#+CALL: image-manipulation(layer_name="Nav", img_path="./corne-right/layers/navigation.png", base_img="./assets/corne.png", in_layer=corne-navigation-layer, in_layer_thumb=corne-navigation-layer-thumb, x_pixels=x-pixels-corne, x_pixels_thumb=x-pixels-thumb-corne, y_pixels=y-pixels-corne, y_pixels_thumb=y-pixels-thumb-corne)

#+CALL: image-manipulation(layer_name="Nav", img_path="./corne-right/layers/num.png", base_img="./assets/corne.png", in_layer=corne-num-layer, in_layer_thumb=corne-num-layer-thumb, x_pixels=x-pixels-corne, x_pixels_thumb=x-pixels-thumb-corne, y_pixels=y-pixels-corne, y_pixels_thumb=y-pixels-thumb-corne)

** Layer generator
#+name: layer-generator
#+begin_src python :session :var in_layer=lily58-base-layer :var in_layer_thumb=lily58-base-layer-thumb :results verbatim silent
  mapper = {
      ",": "KC_COMMA",
      ".": "KC_DOT",
      "/": "KC_SLSH",
      ";": "KC_SCLN",
      "'": "KC_QUOT",
      "[": "KC_LBRC",
      "]": "KC_RBRC",
      "{": "KC_LCBR",
      "}": "KC_RCBR",
      "(": "KC_LPRN",
      ")": "KC_RPRN",
      "`": "KC_GRV",
      "\\": "KC_BSLS",
      "=": "KC_EQL",
      "*": "KC_ASTR",
      "&": "KC_AMPR",
      "+": "KC_PLUS",
      "^": "KC_CIRC",
      "%": "KC_PERC",
      "$": "KC_DLR",
      "|": "KC_PIPE",
      "#": "KC_HASH",
      "@": "KC_AT",
      "!": "KC_EXLM",
      "~": "KC_TILD",
      "-": "KC_MINS",
      "_": "KC_UNDS",
      # "LALT": "KC_LALT",
      "G+TAB": "LGUI(KC_TAB)",
      "G/SPC": "LGUI_T(KC_SPC)",
      "C+T": "LCTL(KC_T)",
      "C+TAB": "LCTL(KC_TAB)",
      "_NAV/ESC": "LT(_NAV, KC_ESC)",
      "S/TAB": "SFT_T(KC_TAB)",
      "C/ENT": "LCTL_T(KC_ENT)",
      "_NUM/BSPC": "LT(_NUM, KC_BSPC)",
      "WOR/ALT": "LT(LM(_NUM, MOD_LGUI), KC_LALT)",
      "TR_PR": "BALL_PRC",
      "TR_SCR": "BALL_SCR",
      "TR_LC": "BALL_LC",
      "QWERTY": "TO(_QWERTY)",
      "BASE": "TO(_BASE)",
  }


  def format_key(key):
      key = mapper.get(str(key), f"KC_{key}")
      return f"{key}"

  keyboard = ""
  for row in in_layer:
      for key in row:
          if key != "":
              keyboard += f"{format_key(key)},"
      keyboard += "\n"
  for key in in_layer_thumb[0]:
      keyboard += f"{format_key(key)},"
  keyboard = keyboard[:-1]

  keyboard
      #+end_src

