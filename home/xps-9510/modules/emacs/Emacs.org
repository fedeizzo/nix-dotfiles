 #+title: Emacs configuration
#+PROPERTY: header-args:emacs-lisp :tangle ~/.config/emacs/init.el

* init
~use-package~ keywords:
- ~:init~ code exectued before package is loaded;
- ~:config~ code exectued after package is loaded, this code is executed lazily;
- ~:commands~ creates an autoload for commands for lazy loading. This allow to define keybind without the ~'~ 
- ~:bind~ new keybinds after package is loaded. Defined  in this way ~:bind (("M-o l" . my-command))~;
- ~:bind-keymap~ is the similar to ~:bind~ and allows to specify keybind command instead of commands;
- ~:custom~ defines customizable variable of package (for very particular cases, most of the time is better to use ~setq~ in the ~:init~ or ~:config~ section);
- ~:load-path~ allows to laod a package from a directory inside the filesystem or another source;
- ~:hook~ add functions into package hookds.

* Performance
#+begin_src emacs-lisp
#+end_src
* Clean emacs directory
#+begin_src emacs-lisp
#+end_src
* General config
#+begin_src emacs-lisp
#+end_src
* Keymaps
** Global
#+begin_src emacs-lisp
#+end_src

* Packages
** Better command - amx
#+begin_src emacs-lisp
#+end_src

** Completion - ivy counsel helpful company
*** Minibuffer
#+begin_src emacs-lisp
#+end_src
*** Anything
#+begin_src emacs-lisp
#+end_src
** Deft for fast plain text files searching - disabled
#+begin_src emacs-lisp
  ;; (use-package deft
  ;;   :commands (deft)
  ;;   :config
  ;;   (setq deft-extensions '("org")
  ;;         deft-directory "~/zettelkasten/"
  ;;         deft-recursive t
  ;;         deft-use-filename-as-title t))
#+end_src

** TODO Dired
#+begin_src emacs-lisp
  (setq dired-listing-switches "-aBhl --group-directories-first")
#+end_src

** Direnv and lorri integration
#+begin_src emacs-lisp
#+end_src

** Elfeed
#+begin_src emacs-lisp
  ;; (use-package elfeed
  ;;   :config
  ;;   (setq elfeed-feeds
  ;; 	'("http://nullprogram.com/feed/"
  ;;           "https://planet.emacslife.com/atom.xml"))
  ;;   )
#+end_src

** Evil mode
#+begin_src emacs-lisp
#+end_src

** Esup - startup time
#+begin_src emacs-lisp
#+end_src

** Buffer manager - bufler
#+begin_src emacs-lisp
#+end_src

** Folding - origami
#+begin_src emacs-lisp
#+end_src

** Format - format-all
#+begin_src emacs-lisp
#+end_src

** Hydra
Installation
#+begin_src emacs-lisp
#+end_src
Hydra for elisp major mode
#+begin_src emacs-lisp
#+end_src
Hydra for org-roam mode
** Keybind manager using leader
This section must be the last one because it should stay after any function declaration

#+begin_src emacs-lisp
#+end_src

** hledger
#+begin_src emacs-lisp
#+end_src

** Languagetool
#+begin_src emacs-lisp
  ;; (use-package languagetool
  ;;   :commands (languagetool-check
  ;;              languagetool-clear-suggestions
  ;;              languagetool-correct-at-point
  ;;              languagetool-correct-buffer
  ;;              languagetool-set-language
  ;;              languagetool-server-mode
  ;;              languagetool-server-start
  ;;              languagetool-server-stop)
  ;;   :config
  ;;   (setq languagetool-java-arguments '("-Dfile.encoding=UTF-8")
  ;;         languagetool-console-command "languagetool-commandline"
  ;;         languagetool-server-command "languagetool-server"))
#+end_src
** LSP
#+begin_src emacs-lisp
#+end_src

*** nix
#+begin_src emacs-lisp
#+end_src

*** rust
#+begin_src emacs-lisp
#+end_src

*** yaml
#+begin_src emacs-lisp
#+end_src
*** C
#+begin_src emacs-lisp
#+end_src
*** Yuck
#+begin_src emacs-lisp
#+end_src

** TODO Magit
#+begin_src emacs-lisp
#+end_src

** Notmuch -email
#+begin_src emacs-lisp
#+end_src

** Pairs - rainbow-delimiters
#+begin_src emacs-lisp
#+end_src

** Pdf tools
#+begin_src emacs-lisp
#+end_src

** Autoclose help buffers - popwin
#+begin_src emacs-lisp
#+end_src

** Project manager - projectile
#+begin_src emacs-lisp
#+end_src
Hydra
#+begin_src emacs-lisp
#+end_src

** Search in all files - ripgrep
#+begin_src emacs-lisp
#+end_src

** Search - swiper
#+begin_src emacs-lisp
#+end_src

** Snippets - yasnippet
#+begin_src emacs-lisp
#+end_src

** Save on events - super-save
#+begin_src emacs-lisp
#+end_src

** Spell
#+begin_src emacs-lisp
#+end_src

** Telegram - disabled
#+begin_src emacs-lisp
  ;; (setq telega-directory "/home/fedeizzo/.local/share/telega")
  ;; (setq telega-use-images t)
  ;; (use-package telega
  ;;   :commands (telega)
  ;;   :config
  ;;   (setq telega-use-docker nil)
  ;;   )
#+end_src

** Terminal - vterm
Vterm cannot be installed easily using nixos, for this reason the package management is leaved to nixos. Please refer to ~emacs.nix~ module.

#+begin_src emacs-lisp
  ;; (use-package vterm)
#+end_src

** Text jumping - avy
#+begin_src emacs-lisp
#+end_src

** Treesitter
#+begin_src emacs-lisp
#+end_src

** Vundo
#+begin_src emacs-lisp
#+end_src

** Which key
#+begin_src emacs-lisp

#+end_src

** Window balancing
#+begin_src emacs-lisp
#+end_src

* Emacs application framework
#+begin_src emacs-lisp
  ;; (use-package eaf
  ;;   :straight nil
  ;;   :load-path "~/.config/emacs/emacs-application-framework")
  ;; :custom
  ;;                                       ; See https://github.com/emacs-eaf/emacs-application-framework/wiki/Customization
  ;; (eaf-browser-continue-where-left-off t)
  ;; (eaf-browser-enable-adblocker t)
  ;; (browse-url-browser-function 'eaf-open-browser)
  ;; :config
  ;; (defalias 'browse-web #'eaf-open-browser)
  ;; (eaf-bind-key scroll_up "C-n" eaf-pdf-viewer-keybinding)
  ;; (eaf-bind-key scroll_down "C-p" eaf-pdf-viewer-keybinding)
  ;; (eaf-bind-key take_photo "p" eaf-camera-keybinding)
  ;; (eaf-bind-key nil "M-q" eaf-browser-keybinding)) ;; unbind, see more in the Wiki
  ;; (require 'eaf-browser)
  ;; (require 'eaf-pdf-viewer)
  ;; (require 'eaf-video-player)
  ;; (require 'eaf-image-viewer)
  ;; (require 'eaf-terminal)
  ;; (require 'eaf-markdown-previewer)
  ;; (require 'eaf-org-previewer)
  ;; (require 'eaf-file-manager)
  ;; (require 'eaf-jupyter)
#+end_src

#+RESULTS:

** Browser
#+begin_src emacs-lisp
  ;; (use-package eaf-browser
  ;;    :custom
  ;;    (eaf-browser-continue-where-left-off t)
  ;;    (eaf-browser-enable-adblocker t))
#+end_src

* Org mode
Tasks are classified with these 5 elements:
1. priority
2. location
3. effort estimate
4. project (or in general the belonging field of the task)
5. date (due date, to this is could be useful the usage of org-gcal)

A spaced repetition mechanism to pair with org-roam notes.

#+begin_src emacs-lisp
#+end_src

Open other notes in the same window
#+begin_src emacs-lisp
#+end_src

** Agenda
#+begin_src emacs-lisp
#+end_src

Required dependencies:
#+begin_src emacs-lisp
#+end_src

todo keywords:
- ~TODO~: things to do;
- ~NEXT~: next thing to do in a project, so one next task per project;
- ~HOLD~: paused task for some reason;
- ~DONE~: finished task.

#+begin_src emacs-lisp
#+end_src

Enforce that ~DONE~ can be set only if all children have ~DONE~ set:

#+begin_src emacs-lisp
#+end_src

#+begin_src emacs-lisp
#+end_src

Agenda:
- a keybind to add/change deadline of a task;
- a keybind to note down an appointment (this is different from scheduled, for note down it is sufficient to write the date)
- a keybind to add/change scheduled of a task (In Org mode, scheduling means setting a date when you want to start working on an action item);

Clockin:
- estiamate keybind;
- clockin dynamic based on project? when i move to a project (hook of projectile) asks for which task should be clocked in;
- setup automatic asking for how much time to remove from the count after idle time
  
*** Agenda
#+begin_src emacs-lisp
#+end_src

**** Org-super-agenda
#+begin_src emacs-lisp
#+end_src

*** Capture
#+begin_src emacs-lisp
#+end_src

*** Habits
Refer to ~/org/habits.org

** Annotation of files
Annotations are block of texts associated with a file. The main advantage of this feature for me is the possibility to annotate part of code while reading a codebase not written by me.
#+begin_src emacs-lisp
  ;; (require 'org-annotate-file)
  ;; (setq org-annotate-file-storage-file "~/org/annotations.org")
#+end_src
** Async
#+begin_src emacs-lisp
#+end_src

** Babel
#+begin_src emacs-lisp
#+end_src

** Export
#+begin_src emacs-lisp
#+end_src

** Face
#+begin_src emacs-lisp
#+end_src
** Gnu plot
#+begin_src emacs-lisp
  ;; (use-package gnuplot)
#+end_src

** Image
#+begin_src emacs-lisp
#+end_src

** Svg inkscape manipulation
#+begin_src emacs-lisp
#+end_src
