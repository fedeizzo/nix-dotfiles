#!/usr/bin/env bash

###################################################################
#Script Name	: backup
#Description	: routine for backup with borg
#Args         	: none
#Author       	: Federico Izzo
#Email         	: federico.izzo99@gmail.com
#Last Update    : 09/01/2021
###################################################################

export BORG_REPO='/mnt/home_backup'
export BORG_PASSCOMMAND='rbw get borg'

backup() {
    info "Starting backup"
    borg create \
        --progress \
        --stats \
        --show-rc \
        --exclude-caches \
        --exclude "**/venv" \
        --exclude "**/node_modules" \
        --exclude "/home/fedeizzo/fbk/pei/postgres_data" \
        --compression zstd,22 \
        ::'{hostname}-{now}' \
        $HOME/.gnupg \
        $HOME/.ssh \
        $HOME/.gnupg \
        $HOME/docs \
        $HOME/nixOs-config \
        $HOME/fbk \
        $HOME/uni \
        $HOME/personalProject \
        $HOME/zettelkasten
    backup_exit=$?

    borg prune \
        --progress \
        --stats \
        --save-space \
        --prefix '{hostname}-' \
        --show-rc \
        --keep-daily 1 \
        --keep-weekly 2 \
        --keep-monthly 4
    prune_exit=$?

    global_exit=$(( backup_exit > prune_exit ? backup_exit : prune_exit ))


    if [ ${global_exit} -eq 0 ]; then
        info "Backup and Prune finished successfully"
    elif [ ${global_exit} -eq 1 ]; then
        info "Backup and/or Prune finished with warnings"
    else
        info "Backup and/or Prune finished with errors"
    fi
}

list_repo() {
    borg list 
}

peek_backup() {
    backups=$(borg list --short $_borg_repo)
    index=1
    declare -A mapper
    echo "Backups:"
    for b in $backups; do
        echo -e "\t$index) $b"
        mapper[$index]=$b
        index=$(( index + 1 ))
    done
    read -p "Choose backup: " selected
    if [[ $selected < $index ]]; then
        borg info "::${mapper[$selected]}"
    else
        echo "No backup numbered as: $selected"
    fi
}

disk_handler() {
    helpMessage="usage: backup disk [command]\n\nPossible commands:\n\tmount: mount disk in /mnt.\n\tumount: umount disk from /mnt.\n\tinfo: show info relative to disk usage.\n\thelp: print this message.\n"
    case $1 in
        "mount")
            sudo mount /dev/sdb /mnt
            ;;
        "umount")
            sudo umount /mnt
            ;;
        "info")
            [ ! -d $BORG_REPO ] && echo "Mount backup SSD!" && exit 1
            du -ch --max-depth=0 --exclude 'lost+found' /mnt/* | sort -hr
            df -h | grep '/dev/sdb' | awk -F' ' '{print "used: " $3 " " $5 ", avail: " $4 ", total: " $2}'
            ;;
        "help"|*)
            echo -e $helpMessage
            ;;
    esac
}

info() { printf "\n%s %s\n\n" "$( date )" "$*" >&2; }
trap 'echo $( date ) Backup interrupted >&2; exit 2' INT TERM

helpMessage="usage: backup [command]\n\nPossible commands:\n\tcreate: start backup and prune operation.\n\tlist: list all backup in the repository.\n\tinfo: show info relative to one backup.\n\tdisk: utilities for disk used as backup.\n\thelp: print this message.\n"

case $1 in
    "create")
        [ ! -d $BORG_REPO ] && echo "Mount backup SSD!" && exit 1
        backup
        ;;
    "list")
        [ ! -d $BORG_REPO ] && echo "Mount backup SSD!" && exit 1
        list_repo
        ;;
    "info")
        [ ! -d $BORG_REPO ] && echo "Mount backup SSD!" && exit 1
        peek_backup
        ;;
    "disk")
        shift
        disk_handler $1
        ;;
    "help"|*)
        echo -e $helpMessage
        ;;
esac

